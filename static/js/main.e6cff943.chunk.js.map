{"version":3,"sources":["components/NavbarLink/NavbarLink.tsx","utils/applyClassNames.tsx","components/Layout/Layout.tsx","components/HomePage/HomePage.tsx","components/Loader/Loader.tsx","api.ts","components/PersonLink/PersonLink.tsx","utils/searchHelper.ts","components/SearchLink/SearchLink.tsx","components/PeopleTable/PeopleTable.tsx","components/FilterPanel/FilterPanel.tsx","components/PeoplePage/PeoplePage.tsx","App.tsx","index.tsx"],"names":["NavbarLink","children","to","className","isActive","activeClassName","defaultClassName","classNames","applyClassNames","Layout","role","HomePage","Loader","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","PersonLink","person","search","useLocation","pathname","slug","sex","name","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","params","props","useSearchParams","searchParams","PeopleTable","people","useParams","sortBy","useMemo","get","order","query","century","getAll","getCentury","useCallback","year","Math","trunc","visiblePeople","filteredPeople","filter","queryToLower","toLowerCase","motherName","fatherName","includes","length","born","String","sort","a","b","localeCompare","died","findParent","find","headers","keys","slice","peopleWithParents","map","mother","father","header","FilterPanel","setSearchParams","searchQuery","setCenturies","param","applySearchParams","debounce","useState","searchValue","setSearchValue","type","placeholder","onChange","event","target","onClick","PeoplePage","setPeople","isLoading","setIsLoading","isEmpty","setIsEmpty","hasError","setHasError","useEffect","catch","finally","App","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.e6cff943.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\nimport { FC } from 'react';\nimport { applyClassNames } from '../../utils/applyClassNames';\n\ninterface Props {\n  to: string;\n}\n\nexport const NavbarLink: FC<Props> = ({ children, to }) => (\n  <NavLink\n    to={to}\n    className={({ isActive }) => (\n      applyClassNames(\n        isActive,\n        'has-background-grey-lighter',\n        'navbar-item',\n      )\n    )}\n  >\n    {children}\n  </NavLink>\n);\n","import classNames from 'classnames';\n\nexport const applyClassNames = (\n  isActive: boolean,\n  activeClassName: string,\n  defaultClassName = '',\n) => (\n  classNames(\n    defaultClassName,\n    { [activeClassName]: isActive },\n  )\n);\n","import { Outlet } from 'react-router-dom';\nimport './Layout.scss';\nimport { NavbarLink } from '../NavbarLink';\n\nexport const Layout = () => {\n  return (\n    <>\n      <nav\n        data-cy=\"nav\"\n        className=\"navbar has-shadow default__navbar\"\n        role=\"navigation\"\n        aria-label=\"main navigation\"\n      >\n        <div className=\"container\">\n          <div className=\"navbar-brand\">\n            <NavbarLink to=\"/\">Home</NavbarLink>\n            <NavbarLink to=\"/people\">People</NavbarLink>\n          </div>\n        </div>\n      </nav>\n\n      <main className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </main>\n    </>\n  );\n};\n","export const HomePage = () => (\n  <>\n    <h1 className=\"title\">Home Page</h1>\n  </>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Person } from './types';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import classNames from 'classnames';\nimport { Link, useLocation } from 'react-router-dom';\nimport { Person } from '../../types';\n\ninterface Props {\n  person: Person;\n}\n\nexport const PersonLink = ({ person }: Props) => {\n  const { search } = useLocation();\n\n  return (\n    <Link\n      to={{\n        pathname: `/people/${person.slug}`,\n        search,\n      }}\n      className={classNames({ 'has-text-danger': person.sex === 'f' })}\n    >\n      {person.name}\n    </Link>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { FC } from 'react';\nimport { NavLink, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <NavLink\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </NavLink>\n  );\n};\n","import { useCallback, useMemo } from 'react';\nimport classNames from 'classnames';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport { Person } from '../../types';\nimport { PersonLink } from '../PersonLink';\nimport { SearchLink } from '../SearchLink';\n\ninterface Props {\n  people: Person[];\n}\n\nexport const PeopleTable = ({ people }: Props) => {\n  const { slug } = useParams();\n  const [searchParams] = useSearchParams();\n\n  const sortBy = useMemo(() => searchParams.get('sort'), [searchParams]);\n  const order = useMemo(() => searchParams.get('order'), [searchParams]);\n  const sex = useMemo(() => searchParams.get('sex'), [searchParams]);\n  const query = useMemo(() => searchParams.get('query'), [searchParams]);\n  const century = useMemo(() => searchParams.getAll('century'), [searchParams]);\n\n  const getCentury = useCallback((year: number) => (\n    Math.trunc(year / 100) - 1\n  ), []);\n\n  const visiblePeople = useMemo(() => {\n    let filteredPeople = [...people];\n\n    if (sex) {\n      filteredPeople = filteredPeople.filter(person => person.sex === sex);\n    }\n\n    if (query) {\n      const queryToLower = query.toLowerCase();\n\n      filteredPeople = filteredPeople\n        .filter(({ name, motherName, fatherName }) => (\n          name.toLowerCase().includes(queryToLower)\n          || motherName?.toLowerCase().includes(queryToLower)\n          || fatherName?.toLowerCase().includes(queryToLower)\n        ));\n    }\n\n    if (century.length > 0) {\n      filteredPeople = filteredPeople\n        .filter(({ born }) => century.includes(String(getCentury(born))));\n    }\n\n    return [...filteredPeople].sort((a, b) => {\n      switch (sortBy) {\n        case 'name':\n          return order\n            ? b.name.localeCompare(a.name)\n            : a.name.localeCompare(b.name);\n        case 'sex':\n          return order\n            ? b.sex.localeCompare(a.sex)\n            : a.sex.localeCompare(b.sex);\n        case 'born':\n          return order ? b.born - a.born : a.born - b.born;\n        case 'died':\n          return order ? b.died - a.died : a.died - b.died;\n        default:\n          return 0;\n      }\n    });\n  }, [people, sortBy, order, sex, query, century]);\n\n  const findParent = useCallback((name: string | null) => (\n    name ? visiblePeople.find(person => person.name === name) : null\n  ), [visiblePeople]);\n\n  const headers = useMemo(() => (\n    Object.keys(people[0]).slice(0, -3)\n  ), [people]);\n\n  const peopleWithParents = useMemo<Person[]>(() => (\n    visiblePeople.map(person => ({\n      ...person,\n      mother: findParent(person.motherName),\n      father: findParent(person.fatherName),\n    }))\n  ), [visiblePeople]);\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {headers.map(header => (\n            <th key={header}>\n              <span className=\"is-flex is-flex-wrap-nowrap\">\n                {header}\n                {sortBy !== header && (\n                  <SearchLink params={{ sort: header }}>\n                    <span className=\"icon\">\n                      <i className=\"fas fa-sort\" />\n                    </span>\n                  </SearchLink>\n                )}\n                {sortBy === header && !order && (\n                  <SearchLink params={{ order: 'desc' }}>\n                    <span className=\"icon\">\n                      <i className=\"fas fa-sort-up\" />\n                    </span>\n                  </SearchLink>\n                )}\n                {sortBy === header && order && (\n                  <SearchLink params={{ order: null, sort: null }}>\n                    <span className=\"icon\">\n                      <i className=\"fas fa-sort-down\" />\n                    </span>\n                  </SearchLink>\n                )}\n              </span>\n            </th>\n          ))}\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {peopleWithParents.map(person => {\n          return (\n            <tr\n              data-cy=\"person\"\n              key={person.slug}\n              className={classNames({\n                'has-background-warning': slug === person.slug,\n              })}\n            >\n              <td>\n                <PersonLink\n                  person={person}\n                />\n              </td>\n              <td>{person.sex}</td>\n              <td>{person.born}</td>\n              <td>{person.died}</td>\n              <td>\n                {person.mother ? (\n                  <PersonLink\n                    person={person.mother}\n                  />\n                ) : person.motherName}\n              </td>\n              <td>\n                {person.father ? (\n                  <PersonLink\n                    person={person.father}\n                  />\n                ) : person.fatherName}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\nimport debounce from 'lodash.debounce';\nimport classNames from 'classnames';\nimport {\n  ChangeEvent, useCallback, useMemo, useState,\n} from 'react';\nimport { SearchLink } from '../SearchLink';\n\nexport const FilterPanel = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const sex = useMemo(() => searchParams.get('sex'), [searchParams]);\n  const searchQuery = useMemo(() => searchParams.get('query'), [searchParams]);\n  const century = useMemo(() => searchParams.getAll('century'), [searchParams]);\n  const setCenturies = (param: string) => {\n    if (century.includes(param)) {\n      return [...century];\n    }\n\n    return [...century, param];\n  };\n\n  const applySearchParams = useCallback(\n    debounce((query: string) => {\n      if (query) {\n        setSearchParams({ query });\n      } else {\n        searchParams.delete('query');\n        setSearchParams(searchParams);\n      }\n    }, 500),\n    [],\n  );\n\n  const [searchValue, setSearchValue] = useState(searchQuery || '');\n\n  const handleSearchPerson = (event: ChangeEvent<HTMLInputElement>) => {\n    setSearchValue(event.target.value);\n    applySearchParams(event.target.value);\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filter</p>\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          params={{ sex: null }}\n          className={classNames({ 'is-active': !sex })}\n        >\n          All\n        </SearchLink>\n\n        <SearchLink\n          params={{ sex: 'm' }}\n          className={classNames({ 'is-active': sex === 'm' })}\n        >\n          Male\n        </SearchLink>\n\n        <SearchLink\n          params={{ sex: 'f' }}\n          className={classNames({ 'is-active': sex === 'f' })}\n        >\n          Female\n        </SearchLink>\n      </p>\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            type=\"text\"\n            placeholder=\"Search value\"\n            data-cy=\"NameFilter\"\n            className=\"input\"\n            value={searchValue}\n            onChange={handleSearchPerson}\n          />\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden />\n          </span>\n        </p>\n      </div>\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            <SearchLink\n              params={{ century: setCenturies('16') }}\n              data-cy=\"century\"\n              className={classNames(\n                'button mr-1',\n                { 'is-info': century.includes('16') },\n              )}\n            >\n              16\n            </SearchLink>\n            <SearchLink\n              params={{ century: setCenturies('17') }}\n              data-cy=\"century\"\n              className={classNames(\n                'button mr-1',\n                { 'is-info': century.includes('17') },\n              )}\n            >\n              17\n            </SearchLink>\n            <SearchLink\n              params={{ century: setCenturies('18') }}\n              data-cy=\"century\"\n              className={classNames(\n                'button mr-1',\n                { 'is-info': century.includes('18') },\n              )}\n            >\n              18\n            </SearchLink>\n            <SearchLink\n              params={{ century: setCenturies('19') }}\n              data-cy=\"century\"\n              className={classNames(\n                'button mr-1',\n                { 'is-info': century.includes('19') },\n              )}\n            >\n              19\n            </SearchLink>\n            <SearchLink\n              params={{ century: setCenturies('20') }}\n              data-cy=\"century\"\n              className={classNames(\n                'button mr-1',\n                { 'is-info': century.includes('20') },\n              )}\n            >\n              20\n            </SearchLink>\n          </div>\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              params={{ century: null }}\n              data-cy=\"centuryAll\"\n              className={classNames(\n                'button is-success',\n                { 'is-outlined': century.length > 0 },\n              )}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n      <div className=\"panel-block\">\n        <SearchLink\n          params={{ sex: null, century: null, query: null }}\n          className=\"button is-link is-outlined is-fullwidth\"\n          onClick={() => setSearchValue('')}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Person } from '../../types';\nimport { getPeople } from '../../api';\nimport { PeopleTable } from '../PeopleTable';\nimport { FilterPanel } from '../FilterPanel';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[] | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isEmpty, setIsEmpty] = useState(false);\n  const [hasError, setHasError] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getPeople()\n      .then(response => {\n        if (response.length === 0) {\n          setIsEmpty(true);\n        } else {\n          setIsEmpty(false);\n        }\n\n        setPeople(response);\n        setHasError(false);\n      })\n      .catch(() => setHasError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      {isLoading && (\n        <div className=\"box\">\n          <Loader />\n        </div>\n      )}\n\n      {hasError && (\n        <div className=\"box\">\n          <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n            Something went wrong\n          </p>\n        </div>\n      )}\n\n      {isEmpty && (\n        <div className=\"box\">\n          <p data-cy=\"noPeopleMessage\">\n            There are no people on the server\n          </p>\n        </div>\n      )}\n\n      {people && (\n        <div className=\"block\">\n          <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <FilterPanel />\n            </div>\n            <div className=\"column\">\n              <div className=\"box table-container\">\n                <PeopleTable people={people} />\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n","import {\n  Routes, Route, Navigate,\n} from 'react-router-dom';\n\nimport { Layout } from './components/Layout';\nimport { HomePage } from './components/HomePage';\nimport { PeoplePage } from './components/PeoplePage/PeoplePage';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Routes>\n        <Route path=\"/\" element={<Layout />}>\n          <Route index element={<HomePage />} />\n          <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"people\" element={<PeoplePage />}>\n            <Route path=\":slug\" />\n          </Route>\n          <Route\n            path=\"*\"\n            element={<h1 className=\"title\">Page not found</h1>}\n          />\n        </Route>\n      </Routes>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}